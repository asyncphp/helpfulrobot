<?php

namespace HelpfulRobot\Responder;

use Aerys\Request;
use Aerys\Response;
use Closure;
use Pre\Collections\Collection;

use function Aerys\parseBody;

trait Responds
{
    public function closure()
    {
        return Closure::fromCallable([$this, "run"]);
    }

    async private function parameters(Request $request)
    {
        $parsed = await parseBody($request);

        $data = array_map(($item) => {
            if (is_array($item) && count($item) < 2) {
                return $item[0];
            }

            return $item;
        }, $parsed->getAll()["fields"]);

        return $data;
    }

    async private function respond(Response $response, $code, $status, $data = [])
    {
        $payload = [
            "status" => $status,
        ];

        if (count($data)) {
            $payload["data"] =
                $data instanceof Collection
                    ? $data->toArray()
                    : $data;
        }

        $response
            ->setHeader("Content-type", "text/json")
            ->setStatus($code)
            ->end(json_encode($payload));
    }

    async private function errors($parameters, Response $response)
    {
        $validator = str_replace(
            "Responder", "Validator", static::class
        );

        if (!class_exists($validator)) {
            return false;
        }

        $errors = await (new $validator())->run($parameters);

        if ($errors->length()) {
            await $this->respond(
                $response, 400, "error", $errors
            );

            return true;
        }

        return false;
    }
}
