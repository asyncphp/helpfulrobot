<?php

namespace HelpfulRobot\Responder;

use Aerys\Request;
use Aerys\Response;
use Closure;
use HelpfulRobot\Renderer\Engine;
use League\Fractal\Manager;
use League\Fractal\Resource;
use League\Fractal\TransformerAbstract;
use Pre\Collections\Collection;

use function Aerys\parseBody;
use function HelpfulRobot\Process\defer;

trait Responds
{
    public function closure()
    {
        return Closure::fromCallable([$this, "run"]);
    }

    async private function parameters(Request $request)
    {
        $parsed = await parseBody($request);

        $data = array_map(($item) => {
            if (is_array($item) && count($item) < 2) {
                return $item[0];
            }

            return $item;
        }, $parsed->getAll()["fields"]);

        return $data;
    }

    async private function json(Response $response, $data = [], $status = "ok", $code = 200)
    {
        $payload = json_encode(
            $this->arrayFrom($data) + [
                "status" => $status,
            ]
        );

        $response
            ->setHeader("Content-type", "text/json")
            ->setStatus($code)
            ->end($payload);
    }

    async private function html(Response $response, $template, $data = [], $code = 200)
    {
        $templates = BASE_PATH . "/views";

        $result = await defer(() => {
            $engine = new Engine($templates);
            return $engine->render($template, $this->arrayFrom($data));
        });

        $response
            ->setHeader("Content-type", "text/html")
            ->setStatus($code)
            ->end($result);
    }

    private function arrayFrom($data)
    {
        return $data instanceof Collection
            ? $data->toArray()
            : (array) $data;
    }

    async private function errors($parameters, Response $response)
    {
        $validator = str_replace(
            "Responder", "Validator", static::class
        );

        if (!class_exists($validator)) {
            return false;
        }

        $errors = await (new $validator())->run($parameters);

        if ($errors->length()) {
            await $this->json(
                $response, {
                    "errors" => $errors,
                }, "error", 400
            );

            return true;
        }

        return false;
    }

    private function transformCollection($data, TransformerAbstract $transformer)
    {
        $data = $this->arrayFrom($data);

        $resource = Resource\Collection->new(
            $data, $transformer
        );

        return Manager->new()
            ->createData($resource)
            ->toArray();
    }

    private function transformItem($data, TransformerAbstract $transformer)
    {
        $data = $this->arrayFrom($data);

        $resource = Resource\Item->new(
            $data, $transformer
        );

        return Manager->new()
            ->createData($resource)
            ->toArray();
    }
}
