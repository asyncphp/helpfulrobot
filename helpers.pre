<?php

namespace HelpfulRobot\Process;

use Amp\Process;
use Closure;
use Exception;
use SuperClosure\SerializableClosure;

function start($tag, $command, $log = null)
{
    $file = $log ?? sha1($command);
    $path = "> {$file} 2> {$file}";

    exec("{$command} tag={$tag} {$path} &");

    return identify($tag);
}

function identify($tag)
{
    exec("ps -ax | grep '[t]ag={$tag}'", $lines);

    if (count($lines) < 1) {
        return null;
    }

    $parts = explode(" ", trim($lines[0]));
    return (int) $parts[0];
}

function stop($tag)
{
    $pid = identify($tag);

    if ($pid !== null) {
        exec("kill -9 {$pid}");
    }
}

async function defer(Closure $closure)
{
    $closure = new SerializableClosure($closure);
    $encoded = base64_encode(serialize($closure));

    $autoload = BASE_PATH . "/vendor/autoload.php";

    $code = base64_encode("
        require_once '{$autoload}';
        \$data = unserialize(base64_decode('{$encoded}'));
        \$closure = \$data->getClosure();
        print serialize(\$closure());
    ");

    $process = new Process("php -r 'eval(base64_decode(\"{$code}\"));'");
    $result = await $process->exec(Process::BUFFER_ALL);

    if ($result->exit) {
        throw new Exception($result->stderr);
    }

    return unserialize($result->stdout);
}

namespace HelpfulRobot\Database;

use Amp\Mysql\Connection;
use Pre\Collections\Collection;

async function connect()
{
    static $connection;

    if ($connection) {
        return $connection;
    }

    $host = getenv("DB_HOST");
    $port = getenv("DB_PORT");
    $name = getenv("DB_NAME");
    $user = getenv("DB_USER");
    $pass = getenv("DB_PASS");

    $connection = new Connection(
        "host={$host}:{$port};user={$user};pass={$pass}"
    );

    await $connection->connect();
    await $connection->useDb($name);

    return $connection;
}

async function prepare($query, $values)
{
    $connection = await connect();

    $statement = await $connection->prepare($query);

    $result = await $statement->execute(
        $values instanceof Collection
            ? $values->toArray()
            : $values
    );

    return $result;
}

namespace HelpfulRobot\Crypto;

function hash($plain, $cost = 10)
{
    return password_hash($plain, PASSWORD_BCRYPT, [
        "cost" => $cost,
    ]);
}

function verify($plain, $hash)
{
    return password_verify($plain, $hash);
}
